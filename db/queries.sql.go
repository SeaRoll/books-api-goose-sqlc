// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, db DBTX, id int32) error {
	_, err := db.Exec(ctx, deleteBook, id)
	return err
}

const getConditions = `-- name: GetConditions :many
SELECT time_bucket('1 minute', time)::timestamptz AS bucket,
       avg(temperature) AS avg_temp
FROM conditions
GROUP BY bucket
ORDER BY bucket ASC
`

type GetConditionsRow struct {
	Bucket  pgtype.Timestamptz
	AvgTemp float64
}

func (q *Queries) GetConditions(ctx context.Context, db DBTX) ([]GetConditionsRow, error) {
	rows, err := db.Query(ctx, getConditions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConditionsRow
	for rows.Next() {
		var i GetConditionsRow
		if err := rows.Scan(&i.Bucket, &i.AvgTemp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :exec
INSERT INTO books (title, author, description)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertBookParams struct {
	Title       string
	Author      string
	Description string
}

func (q *Queries) InsertBook(ctx context.Context, db DBTX, arg InsertBookParams) error {
	_, err := db.Exec(ctx, insertBook, arg.Title, arg.Author, arg.Description)
	return err
}

const insertCondition = `-- name: InsertCondition :exec
INSERT INTO conditions (time, location, device, temperature, humidity)
VALUES ($1, $2, $3, $4, $5)
`

type InsertConditionParams struct {
	Time        pgtype.Timestamptz
	Location    string
	Device      string
	Temperature pgtype.Float8
	Humidity    pgtype.Float8
}

func (q *Queries) InsertCondition(ctx context.Context, db DBTX, arg InsertConditionParams) error {
	_, err := db.Exec(ctx, insertCondition,
		arg.Time,
		arg.Location,
		arg.Device,
		arg.Temperature,
		arg.Humidity,
	)
	return err
}

const listBooksPaged = `-- name: ListBooksPaged :many
SELECT id, title, author, description
FROM books
OFFSET $1
LIMIT $2
`

type ListBooksPagedParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListBooksPaged(ctx context.Context, db DBTX, arg ListBooksPagedParams) ([]Book, error) {
	rows, err := db.Query(ctx, listBooksPaged, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET title = $2, author = $3, description = $4
WHERE id = $1
`

type UpdateBookParams struct {
	ID          int32
	Title       string
	Author      string
	Description string
}

func (q *Queries) UpdateBook(ctx context.Context, db DBTX, arg UpdateBookParams) error {
	_, err := db.Exec(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Description,
	)
	return err
}
